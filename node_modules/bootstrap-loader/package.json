{
  "name": "bootstrap-loader",
  "version": "1.2.0-beta.1",
  "description": "Boostrap for Webpack",
  "main": "loader.js",
  "scripts": {
    "test": "node_package/scripts/test",
    "start": "npm run lint && npm run clean && npm run dev",
    "dev": "babel --watch --out-dir lib src",
    "build": "babel --out-dir lib src",
    "lint": "eslint --ext .js .",
    "clean": "rm -rf lib",
    "prerelease": "npm run lint && npm run clean && npm run build",
    "preversion": "npm run prerelease",
    "prepublish": "npm run prerelease",
    "release:patch": "scripts/release patch",
    "release:minor": "scripts/release minor",
    "release:major": "scripts/release major"
  },
  "authors": [
    "Justin Gordon <justin.gordon@gmail.com> (https://github.com/justin808)",
    "Alex Fedoseev <alex.fedoseev@gmail.com> (https://github.com/alexfedoseev)"
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/shakacode/bootstrap-loader.git"
  },
  "bugs": {
    "url": "https://github.com/shakacode/bootstrap-loader/issues"
  },
  "homepage": "https://github.com/shakacode/bootstrap-loader#readme",
  "keywords": [
    "bootstrap",
    "twitter"
  ],
  "peerDependencies": {
    "css-loader": "*",
    "extract-text-webpack-plugin": "<2.0.0",
    "node-sass": "*",
    "resolve-url-loader": "*",
    "sass-loader": "*",
    "url-loader": "*",
    "webpack": "*"
  },
  "dependencies": {
    "chalk": "^1.1.1",
    "escape-regexp": "0.0.1",
    "js-yaml": "^3.4.3",
    "loader-utils": "^0.2.11",
    "resolve": "^1.1.6",
    "semver": "^5.0.3",
    "strip-json-comments": "^1.0.4"
  },
  "devDependencies": {
    "babel": "^6.0.15",
    "babel-cli": "^6.1.4",
    "babel-preset-es2015": "^6.1.4",
    "babel-tape-runner": "^2.0.1",
    "eslint": "^1.10.3",
    "eslint-config-shakacode": "^5.0.0",
    "tap-spec": "^4.1.1",
    "tape": "^4.5.1"
  },
  "readme": "[![npm version](https://badge.fury.io/js/bootstrap-loader.svg)](https://badge.fury.io/js/bootstrap-loader)\n\nAloha from Justin Gordon and the [ShakaCode](http://www.shakacode.com) Team! We need your help. Venture capital funding has slowed and, for the first time, my ShakaCode team is actively looking for our next  project. If you like **React on Rails**, please consider contacting me if we could potentially help you in any way. I'm offering a free half hour project consultation, on anything from React on Rails to any aspect of web application development, including both consumer and enterprise products. You can read more about my background [here](http://www.railsonmaui.com/about). Whether you have a new project, or need help on an existing project, please email me directly at [justin@shakacode.com](mailto:justin@shakacode.com). And thanks in advance for any referrals! Your support keeps this project going.\n\n# Version 1.x Docs!\nIf you want the version 2 docs, see them on the [master branch](https://github.com/shakacode/bootstrap-loader). We intend to make bug fixes to this branch. Feature development should go into \"master\". Then again, if you need to stay on v1 of Webpack and you want a feature, go ahead and make a PR off of this branch. \n\n# bootstrap-loader\n\nSuccessor to [bootstrap-sass-loader](https://github.com/shakacode/bootstrap-sass-loader). Load Bootstrap styles and scripts in your Webpack bundle. This loader uses SASS to process CSS styles. Bootstrap 3 & 4 are supported.\n\n**NOTE:** [Bootstrap 4](http://v4-alpha.getbootstrap.com/), (twbs/bootstrap)[https://github.com/twbs/bootstrap] is currently in alpha right now. Bootstrap 4 definitely worked when we first released this package. The parent company of this product, [ShakaCode](http://www.shakacode.com) had originally planned to use it for our upcoming commercial product, but we decided that Bootstrap 4 was changing too fast for a production product. Thus, we're still using Bootstrap 3, and we're not actively developing with Bootstrap 4. Consequently, for Bootstrap 4 issues, we need one of:\n\n1. Community support to help us with Bootstrap 4 issues and pull requests.\n2. We'd be thrilled to have another maintainer join us to help with Bootstrap 4 issues.\n3. We'd also be thrilled if any companies are open to sponsoring the development of features and issues regarding Bootstrap 4.\n \nThat being said, Bootstrap 4 probably works just fine!\n\n## NEWS\n\n2016-08-01: Released 1.1.0. Supports custom bootstraprc location.\n2016-02-28: Released 1.0.9. Updated to support Bootstrap 4, alpha 2!\n\n## Installation\nGet it via npm:\n\n```bash\nnpm install bootstrap-loader\n```\n\nDon't forget to install these dependencies (use `--save or --saveDev` option per your needs to update your `package.json`):\n\n```bash\n# Bootstrap 3\nnpm install bootstrap-sass\n\n# or Bootstrap 4\nnpm install bootstrap@v4.0.0-alpha.2\n\n# Note, alpha.3 is broken\n\n# Node SASS & other loaders needed to handle styles\nnpm install css-loader node-sass resolve-url-loader sass-loader style-loader url-loader\n```\n\nIf you're using Bootstrap 4, you probably need:\n\n```bash\nnpm install postcss-loader\n```\n\n\n## Usage\nSimply require it:\n\n```js\nrequire('bootstrap-loader');\n```\n\nOr add `bootstrap-loader` as [a module in an entry point](https://webpack.github.io/docs/configuration.html#entry) in your webpack config:\n\n```js\nentry: [ 'bootstrap-loader', './app' ]\n```\n\nConfig is optional. If used, by default it should be placed in your project's root dir with name `.bootstraprc`. You can write it in `YAML` or `JSON` formats. Take a look at the default config files for [Bootstrap 3](.bootstraprc-3-default) and [Bootstrap 4](.bootstraprc-4-default). Note, we recommend using a configuration or else you might pick up unwanted upgrades, such as when we make Bootstrap 4 the default. Config options don't fall back on the defaults once a config file is present. Be sure not to delete config options. To start with a custom config, copy over a default config file as a starting point.\n\nIf the default location doesn't work for you (e.g. you want to create multiple bootstrap configs for branding variations or you symlink your npm_modules directory), you may pass the **absolute path** of the `.bootstraprc` file to the loader in your webpack config, e.g. `bootstrap-loader/lib/bootstrap.loader?extractStyles&configFilePath=${__dirname}/.bootstraprc!bootstrap-loader/no-op.js`.\n\nNote that :`__dirname` is a [global variable](https://nodejs.org/docs/latest/api/globals.html#globals_dirname) that Node sets for us. It is \"the name of the directory that the currently executing script resides in.\"\n\n```yaml\n---\n# You can use comments here\nuseFlexbox: true\n\nstyleLoaders:\n  - style\n  - css\n  - sass\n\nstyles:\n  normalize: true\n  print: true\n\nscripts:\n  alert: true\n  button: true\n```\n\n```js\n{\n  // And JSON comments also!\n  \"useFlexbox\": true,\n\n  \"styleLoaders\": [\"style\", \"css\", \"sass\"],\n\n  \"styles\": {\n    \"normalize\": true,\n    \"print\": true\n  },\n\n  \"scripts\": {\n    \"alert\": true,\n    \"button\": true\n  }\n}\n```\n\nIf no config provided, default one for Bootstrap 3 will be used.\n\n## Examples\nCheck out example apps in [`examples/`](examples) folder:\n\n* Basic usage: [examples/basic](examples/basic)\n * See the `npm run bs4:customlocation` tasks for examples on how to pass your .bootstraprc config.\n* With CSS Modules: [examples/css-modules](examples/css-modules) (This example shows off hot reloading with Babel 6 as well!)\n\n## Common Options for Bootstrap 3 and 4\nHere are common options for Bootstrap 3 & 4.\n\n### Bootstrap 3\n\n#### `loglevel`\n\nDefault: `disabled`\n\nOutputs debugging info. Set this option to `debug` to output debugging information. This is critical for debugging issues. The output will go to your webpack console.\n\n```yaml\nloglevel: debug\n```\n\n#### `bootstrapVersion`\n\nDefault: `3`\n\nMajor version of Bootstrap. Can be 3 or 4.\n\n```yaml\nbootstrapVersion: 3\n```\n\n#### `styleLoaders`\n\nDefault: `[ 'style', 'css', 'sass' ]`\n\nArray of webpack loaders. `sass-loader` is required, order matters. In most cases the style loader should definitely go first and the sass loader should be last.\n\n```yaml\nstyleLoaders:\n  - style\n  - css\n  - sass\n\n# You can apply loader params here:\n  - sass?outputStyle=expanded\n```\n\n#### `extractStyles`\n\nDefault: `false`\n\nExtract styles to stand-alone css file using `extract-text-webpack-plugin` lower than 2.0.0. See [extract-text-plugin](https://github.com/webpack/extract-text-webpack-plugin) for more details.\n\n```yaml\nextractStyles: false\n\n# Different settings for different environments can be used,\n# It depends on value of NODE_ENV environment variable\nenv:\n  development:\n    extractStyles: false\n  production:\n    extractStyles: true\n```\n\nThis param can also be set to `true` in webpack config:\n\n```js\nentry: [ 'bootstrap-loader/extractStyles', './app' ]\n```\n\nSee [shakacode/react-webpack-rails-tutorial/blob/master/client/webpack.client.rails.build.config.](https://github.com/shakacode/react-webpack-rails-tutorial/blob/master/client/webpack.client.rails.build.config.js) for a working example which is deployed to [www.reactrails.com](http://www.reactrails.com/).\n\n#### `preBootstrapCustomizations`\n\nDefault: `disabled`\n\nCustomize Bootstrap variables that get imported before the original Bootstrap variables. Thus, derived Bootstrap variables can depend on values from here. See the Bootstrap [`_variables.scss`](https://github.com/twbs/bootstrap-sass/blob/master/assets/stylesheets/bootstrap/_variables.scss) file for examples of derived Bootstrap variables.\n\n```yaml\npreBootstrapCustomizations: ./path/to/bootstrap/pre-customizations.scss\n```\n\n#### `bootstrapCustomizations`\n\nDefault: `disabled`\n\nThis gets loaded after bootstrap variables is loaded. Thus, you may customize Bootstrap variables based on the values established in the Bootstrap [`_variables.scss`](https://github.com/twbs/bootstrap-sass/blob/master/assets/stylesheets/bootstrap/_variables.scss) file. Note, if `bootstrap` did not have derived values, it would not be necessary to have two config files for customizing bootstrap values.\n\nIf you want your bootstrap override value to apply to derived variable values, then place your customizations in `preBootstrapCustomizations`. If you want to be sure your changes don't affect other derived values, place the changes in bootstrapCustomizations.\n\nIf you are not sure, you can probably simply use `preBootstrapCustomizations` and, if you have issues, see [`_variables.scss`](https://github.com/twbs/bootstrap-sass/blob/master/assets/stylesheets/bootstrap/_variables.scss) for derived values.\n\n```yaml\nbootstrapCustomizations: ./path/to/bootstrap/customizations.scss\n```\n\n#### `appStyles`\n\nDefault: `disabled`\n\nImport your custom styles here. Usually this endpoint-file contains list of `@imports` of your application styles.\n\n```yaml\nappStyles: ./path/to/your/app/styles/endpoint.scss\n```\n\n#### `styles`\n\nDefault: all\n\nBootstrap styles.\n\n```yaml\nstyles:\n  mixins: true\n  normalize: true\n  ...\n\n# or enable/disable all of them:\nstyles: true / false\n```\n\n#### `scripts`\n\nDefault: all\n\nBootstrap scripts.\n\n```yaml\nscripts:\n  transition: true\n  alert: true\n  ...\n\n# or enable/disable all of them:\nscripts: true / false\n```\n\n#### `useCustomIconFontPath`\n\nDefault: false\n\nIf you're using a custom icon font and you need to specify its path (`$icon-font-path`) in your Sass files, set this option to true.\n\n```yaml\nuseCustomIconFontPath: true / false\n```\n\n```\n$icon-font-path: ../fonts // relative to your Sass file\n$icon-font-name: 'glyphicons' // you'll typically want to change this too.\n```\n\n\n### Bootstrap 4\nThere is only one additional option for Bootstrap 4:\n\n#### `useFlexbox`\n\nDefault: `true`\n\nEnable / disable flexbox model.\n\n```yaml\nuseFlexbox: true\n```\n\n#### Tether\nAdditionally, Bootstrap 4 requires Tether. You can add Tether per the examples in the `/examples` directory.\n\n1. Add tether to package.json: `npm i --save tether`\n2. Add tether as an entry point to your webpack config.\n3. Add this plugin to your webpack config:\n\n```\n  plugins: [\n    new ExtractTextPlugin('app.css', { allChunks: true }),\n    new webpack.ProvidePlugin({\n      \"window.Tether\": \"tether\"\n    }),\n  ],\n```\n\n#### PostCSS\nBootstrap 4 seems to require postcss:\n\n1. Add postcss and the the postcss-loader: `npm i --save postcss postcss-loader`\n2. Put `postcss` before `sass` in the order of loaders in your `.bootstraprc` file.\n\n#### Glyphicons\nGlyphicons have been removed from Bootstrap 4. The examples demonstrate how to use the font-awesome-loader\n\n## Additional configurations\n\n#### Paths to custom assets\nIf you use `bootstrap-loader` to load your styles (via `preBootstrapCustomizations`, `bootstrapCustomizations` & `appStyles`) and you load custom assets (fonts, images etc.), then you can use relative paths inside `url` method (relative to SASS file, from which you load asset).\n\nThis was made possible thanks to [resolve-url-loader](https://github.com/bholloway/resolve-url-loader). In common case you don't have to do anything special to apply it — we are doing it internally (just don't forget to install it). But if you want to use its custom settings, please provide it explicitly via `styleLoaders` option in `.bootstraprc`:\n\n```yaml\nstyleLoaders:\n  - style\n  - css?sourceMap\n  - resolve-url?sourceMap\n  - sass?sourceMap\n```\n\n#### Incorporating Bootswatch themes\nThe following steps are needed to successfully incorporate a theme from Bootswatch:\n\n1. Download the `.scss` files (`_variables.scss` and `_bootswatch.scss`) for the theme you have chosen.\n2. Put the files somewhere in your project structure (e.g. the `./styles` directory).\n3. Add an additional SCSS file, like bs-theme.scss, that contains the following:\n   ```\n   @import './_bootswatch.scss';\n   ```\n\n4. Add the following to your .bootstraprc file:\n  ```\n  preBootstrapCustomizations: ./styles/_variables.scss\n  appStyles: ./styles/bs-theme.scss\n  ```\nThe theme should now be applied as expected.\nNote that this section might be valid for other theme packs as well.\n\n#### jQuery\nIf you want to use Bootstrap's JS scripts — you have to provide `jQuery` to Bootstrap JS modules using `imports-loader`. To avoid having to include `jQuery` in your project you can disable all scripts (see [scripts](#scripts)).\n\n```js\nmodule: {\n  loaders: [\n    // Use one of these to serve jQuery for Bootstrap scripts:\n\n    // Bootstrap 3\n    { test:/bootstrap-sass[\\/\\\\]assets[\\/\\\\]javascripts[\\/\\\\]/, loader: 'imports?jQuery=jquery' },\n\n    // Bootstrap 4\n    { test: /bootstrap[\\/\\\\]dist[\\/\\\\]js[\\/\\\\]umd[\\/\\\\]/, loader: 'imports?jQuery=jquery' },\n  ],\n},\n```\n\nNote: if you're not concerned about Windows, the lines look like this (simpler regexp pattern):\n\n```js\n// Boostrap 3\n{ test: /bootstrap-sass\\/assets\\/javascripts\\//, loader: 'imports?jQuery=jquery' },\n\n// Bootstrap 4\n{ test: /bootstrap\\/dist\\/js\\/umd\\//, loader: 'imports?jQuery=jquery' },\n```\n\n\n#### Icon fonts\nBootstrap uses **icon fonts**. If you want to load them, don't forget to setup `url-loader` or `file-loader` in webpack config:\n\n```js\nmodule: {\n  loaders: [\n    { test: /\\.(woff2?|svg)$/, loader: 'url?limit=10000' },\n    { test: /\\.(ttf|eot)$/, loader: 'file' },\n  ],\n},\n```\n\n## FAQ\n\n### Using Bootstrap mixins and variables in your own code\n\nYou should use `sass-resources-loader` in your `webpack` config.\n\nIn your `webpack.config.js`:\n```javascript\nmodule.exports = {\n\n  // stuff removed for clarity ...\n\n  module: {\n    loaders: [\n      // stuff removed for clarity ...\n      {\n        test: /\\.scss$/,\n        loader: ExtractTextPlugin.extract(\n          'style',\n          'css?modules&importLoaders=2&localIdentName=[name]__[local]__[hash:base64:5]' +\n          '!sass' +\n          '!sass-resources'\n        ),\n      },\n      // stuff removed for clarity ...\n    ],\n  },\n\n  // stuff removed for clarity ...\n\n  sassResources: './config/sass-resources.scss',\n}\n```\n\nAnd in your `./config/sass-resources.scss`:\n```\n// Make variables and mixins available when using CSS modules.\n@import \"node_modules/bootstrap-sass/assets/stylesheets/bootstrap/_variables\";\n@import \"node_modules/bootstrap-sass/assets/stylesheets/bootstrap/_mixins\";\n```\n\nYou can then use mixins and variables from Bootstrap in your own code.\n\n## Contributing\nSee [Contributing](CONTRIBUTING.md) to get started.\n\n## License\nMIT.\n\n## Example and Related Libraries\n* [react-webpack-rails-tutorial](https://github.com/shakacode/react-webpack-rails-tutorial/), live example at [www.reactrails.com](http://www.reactrails.com/).\n* [sass-resources-loader](https://github.com/shakacode/sass-resources-loader/)\n* [Simple integration example](./examples/basic)\n* [React + hot reloading example: bootstrap-loader-css-modules-example](./examples/css-modules)\n* [react_on_rails gem](https://github.com/shakacode/react_on_rails)\n\n## Useful Q&A\n* [Using CSS modules with Bootstrap](https://github.com/shakacode/bootstrap-loader/issues/9)\n* [How would you use bootstrap styles to build css module styles](https://github.com/shakacode/bootstrap-loader/issues/12)\n\nWe'll identify issues that are [questions](https://github.com/shakacode/bootstrap-loader/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Aquestion).\n",
  "readmeFilename": "README.md",
  "_id": "bootstrap-loader@1.2.0-beta.1",
  "dist": {
    "shasum": "2fa5992fe0f8867facd9f42639853682c46c5bcc"
  },
  "_from": "bootstrap-loader@",
  "_resolved": "https://registry.npmjs.org/bootstrap-loader/-/bootstrap-loader-1.2.0-beta.1.tgz"
}
